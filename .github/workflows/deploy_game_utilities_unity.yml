name: Deploy to GameUtilities.Unity

on:
  workflow_dispatch:
  push:
    tags:
      - v*

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DEPLOYMENT_REPO: 'ADM87/GameUtilities.Unity'
      RUNTIME_ROOT: './Runtime'
      UNITY_ROOT: './Unity'
      TEST_ROOT: './Tests'
      PUBLISH_PATH: './Publish'
      RUNTIME_PROJ: 'GameUtilities.Runtime/GameUtilities.Runtime.csproj'
      TEST_PASS: 'GameUtilities.Tests/Tests.Pass/Tests.Pass.csproj'
      TEST_FAIL: 'GameUtilities.Tests/Tests.Fail/Tests.Fail.csproj'
      DEPLOY_PATH: 'Plugins/GameUtilitiesRuntime/'
      RUNTIME_ARTIFACT: 'GameUtilities.Runtime.dll'
      TEST_PASS_ARTIFACT: 'Tests.Pass.dll'
      TEST_FAIL_ARTIFACT: 'Tests.Fail.dll'
      PACKAGE_JSON: 'package.json'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: ${{ env.RUNTIME_ROOT }}
          ssh-key: ${{ secrets.SSH_KEY }}
          persist-credentials: true

      - name: Fetch Version
        run: |
          cd ${{ env.RUNTIME_ROOT }}
          git fetch --tags --force
          echo "VERSION_TAG=$(echo $(git tag -l --sort=-v:refname 'v[0-9]*.[0-9]*.[0-9]*' | head -n 1))" >> $GITHUB_ENV
          cd ..

      - name: Setup .NET
        if: ${{ env.VERSION_TAG }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Build & Test
        if: ${{ env.VERSION_TAG }}
        run: |
          dotnet build ${{ env.RUNTIME_ROOT }}/${{ env.TEST_PASS }} -o ${{ env.TEST_ROOT }}
          dotnet build ${{ env.RUNTIME_ROOT }}/${{ env.TEST_FAIL }} -o ${{ env.TEST_ROOT }}
          dotnet test ${{ env.TEST_ROOT }}/${{ env.TEST_PASS_ARTIFACT }} ${{ env.TEST_ROOT }}/${{ env.TEST_FAIL_ARTIFACT }}

      - name: Publish GameUtilities.Runtime
        run: dotnet publish ${{ env.RUNTIME_ROOT }}/${{ env.RUNTIME_PROJ}} -c Release -o ${{ env.PUBLISH_PATH }}

      - name: Checkout GameUtilities.Unity
        if: ${{ env.VERSION_TAG }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.DEPLOYMENT_REPO }}
          path: ${{ env.UNITY_ROOT }}
          ssh-key: ${{ secrets.SSH_KEY }}
          ref: 'main'

      - name: Copy GameUtilities.Runtime
        if: ${{ env.VERSION_TAG }}
        run: |
          mkdir -p ${{ env.UNITY_ROOT }}/${{ env.DEPLOY_PATH }}
          cp ${{ env.PUBLISH_PATH }}/${{ env.RUNTIME_ARTIFACT }} ${{ env.UNITY_ROOT }}/${{ env.DEPLOY_PATH }}

      - name: Commit & Push
        if: ${{ env.VERSION_TAG }}
        env:
          BRANCH_NAME: 'patch/update-gameutilities-runtime-${{ env.VERSION_TAG }}'
          COMMIT_MESSAGE: 'Update GameUtilities.Runtime to ${{ env.VERSION_TAG }}'
        run: |
          cd ${{ env.UNITY_ROOT }}
          git config user.name "${{ secrets.GIT_USER }}"
          git config user.email "${{ secrets.GIT_EMAIL }}"

          echo "BRANCH_NAME=${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=${{ env.COMMIT_MESSAGE }}" >> $GITHUB_ENV

          PACKAGE_JSON_PATH="${{ env.PACKAGE_JSON }}"
          CURRENT_VERSION=$(grep -oP '(?<="version": ")[^"]*' $PACKAGE_JSON_PATH)
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$3 = $3 + 1; print}' OFS=.)

          sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" $PACKAGE_JSON_PATH

          git checkout -b ${{ env.BRANCH_NAME }}
          git add .
          git commit -m "${{ env.COMMIT_MESSAGE }}"
          git push --set-upstream origin ${{ env.BRANCH_NAME }}
          cd ..

      - name: Create Pull Request
        if: ${{ env.VERSION_TAG }}
        run: |
          cd ${{ env.UNITY_ROOT }}
          gh pr create --title "${{ env.COMMIT_MESSAGE }}" --body "${{ env.COMMIT_MESSAGE }}" --base main --head ${{ env.BRANCH_NAME }}
          cd ..
